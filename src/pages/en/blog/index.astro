---
// src/pages/en/blog/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import BlogCard from '../../../components/BlogCard.astro';
import FeaturedPostCard from '../../../components/FeaturedPostCard.astro';
import { getLangFromUrl, useTranslations } from '../../../i18n/utils';

export const prerender = true;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get all posts for the current language, excluding drafts
const allPosts = await getCollection('blog', ({ id, data }) => {
  return id.startsWith(lang + '/') && data.draft !== true;
});

// Sort posts by date from newest to oldest
allPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf());

const hasPosts = allPosts.length > 0;
const latestPost = hasPosts ? allPosts[0] : null;
const otherPosts = hasPosts ? allPosts.slice(1) : [];

// Collect all unique tags for filter buttons
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))];
---
<BaseLayout
  title="blog_page_title"
  description="blog_page_desc"
>
  <section id="blog-list" class="blog-page">
    <div class="container">
      <div class="blog-header fade-in">
        <h1 class="section-title" set:html={t('blog_h1')}></h1>
        <p class="section-subtitle">{t('blog_p')}</p>
      </div>

      <!-- Display the latest post separately -->
      {hasPosts && latestPost && (
        <div class="featured-post-section fade-in">
          <h2>{t('blog_latest_post')}</h2>
          <FeaturedPostCard post={latestPost} />
        </div>
      )}

      <!-- Display other posts and filters -->
      {(otherPosts.length > 0 || allTags.length > 0) && (
        <div class="posts-list-section fade-in" style="transition-delay: 200ms;">

          {otherPosts.length > 0 && <h2>{t('blog_other_posts')}</h2>}

          <div class="filters-container">
            <div class="search-wrapper">
              <i class="fas fa-search search-icon" aria-hidden="true"></i>
              <input type="search" id="blog-search" placeholder={t('blog_search_placeholder')} aria-label="Search articles">
            </div>
            {allTags.length > 0 && (
              <div class="tags-filter" id="tags-filter">
                <button class="tag-filter-btn active" data-tag="all">{t('filter_all')}</button>
                {allTags.map(tag => (
                  <button class="tag-filter-btn" data-tag={tag.toLowerCase()}>{tag}</button>
                ))}
              </div>
            )}
          </div>

          {otherPosts.length > 0 && (
            <div id="posts-grid" class="portfolio-grid blog-grid">
              {otherPosts.map(post => (
                <BlogCard post={post} />
              ))}
            </div>
          )}
        </div>
      )}

      <p id="no-results-message" class="no-results-message" style="display: none;">{t('blog_no_results')}</p>

      {!hasPosts && (
        <p class="no-results-message">{t('blog_no_posts_yet')}</p>
      )}

    </div>
  </section>
</BaseLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    const searchInput = document.getElementById('blog-search') as HTMLInputElement | null;
    const tagsContainer = document.getElementById('tags-filter');
    const postsGrid = document.getElementById('posts-grid');
    const noResultsMessage = document.getElementById('no-results-message');

    if (!postsGrid || !searchInput || !tagsContainer || !noResultsMessage) {
      return;
    }

    const allCards = Array.from(postsGrid.querySelectorAll<HTMLElement>('.blog-card-link'));

    let currentTag = 'all';
    let currentQuery = '';

    function filterPosts() {
      let visibleCount = 0;

      allCards.forEach(card => {
        const title = card.dataset.title || '';
        const description = card.dataset.description || '';
        const tags = card.dataset.tags || '';

        const matchesQuery = currentQuery === '' || title.includes(currentQuery) || description.includes(currentQuery);
        const matchesTag = currentTag === 'all' || (tags && tags.split(',').includes(currentTag));

        const isVisible = matchesQuery && matchesTag;

        card.style.display = isVisible ? '' : 'none';

        if (isVisible) {
          visibleCount++;
        }
      });

      if (noResultsMessage) {
        noResultsMessage.style.display = visibleCount === 0 ? 'block' : 'none';
      }
    }

    searchInput.addEventListener('input', (e) => {
      currentQuery = (e.target as HTMLInputElement).value.toLowerCase().trim();
      filterPosts();
    });

    tagsContainer.addEventListener('click', (e) => {
      const target = e.target;
      if (target instanceof HTMLElement && target.matches('.tag-filter-btn')) {
        tagsContainer.querySelector('.active')?.classList.remove('active');
        target.classList.add('active');
        currentTag = target.dataset.tag || 'all';
        filterPosts();
      }
    });
  });
</script>