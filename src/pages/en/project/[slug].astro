---
// src/pages/en/project/[slug].astro
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import CaseStudyLayout from '../../../layouts/CaseStudyLayout.astro';
import { useTranslations } from '../../../i18n/utils';
import type { TranslationKey } from '../../../env.d.ts';

export const prerender = true;

export async function getStaticPaths() {
  const allProjects = await getCollection('projects', ({ id }) => {
    return id.startsWith('en/');
  });
  return allProjects.map((project) => ({
    params: { slug: project.slug.replace(/^en\//, '') },
    props: { project },
  }));
}

const lang = 'en';
const t = useTranslations(lang);
const { project } = Astro.props;
const { Content } = await project.render();

if (!project) {
    return Astro.redirect(`/${lang}/404`);
}

const {
    titleKey, descriptionKey, ogImage, clientKey, servicesKey, year, heroImage, heroImageAlt,
    header, content
} = project.data;
---
<CaseStudyLayout
    title={titleKey as TranslationKey}
    description={descriptionKey as TranslationKey}
    ogImage={ogImage}
    clientKey={clientKey as TranslationKey}
    servicesKey={servicesKey as TranslationKey}
    year={year}
    heroImage={heroImage}
    heroImageAlt={heroImageAlt}
>
    <div slot="header">
        <h1 class="gradient-text" set:html={t(header.titleKey as TranslationKey)}></h1>
        <p set:html={t(header.descriptionKey as TranslationKey)}></p>
    </div>

    <div slot="content">
        <Content />
        <h2 set:html={t(content.task.titleKey as TranslationKey)}></h2>
        <p set:html={t(content.task.pKey as TranslationKey)}></p>

        {content.solution && (
            <>
                <h2 set:html={t(content.solution.titleKey as TranslationKey)}></h2>
                <p set:html={t(content.solution.pKey as TranslationKey)}></p>
            </>
        )}

        <h2 set:html={t(content.keyFeatures.titleKey as TranslationKey)}></h2>
        {content.keyFeatures.pKey && <p set:html={t(content.keyFeatures.pKey as TranslationKey)}></p>}
        <ul>
            {content.keyFeatures.listKeys.map(key => <li set:html={t(key as TranslationKey)}></li>)}
        </ul>

        <h2 set:html={t('case_tech')}></h2>
        <div class="tech-stack" style="margin-top: 1rem; margin-bottom: 2rem;">
            <div class="icons" style="gap: 2rem; font-size: 3rem; justify-content: center;">
                {content.techStack.map(tech => <i class:list={tech.icon} title={tech.title} style={tech.color ? `color: ${tech.color}`: ''}></i>)}
            </div>
        </div>

        <h2 set:html={t(content.deployment.titleKey as TranslationKey)}></h2>
        <p set:html={t(content.deployment.pKey as TranslationKey)}></p>

        {content.gallery && (
            <div class="project-gallery">
                <h2 set:html={t(content.gallery.titleKey as TranslationKey)}></h2>
                <div class="gallery-grid">
                    {content.gallery.items.map(item => (
                        <div class="gallery-item">
                            <figure>
                                <Image src={item.img} alt={t(item.captionKey as TranslationKey)} loading="lazy" />
                                <figcaption set:html={t(item.captionKey as TranslationKey)}></figcaption>
                            </figure>
                        </div>
                    ))}
                </div>
            </div>
        )}
    </div>
</CaseStudyLayout>