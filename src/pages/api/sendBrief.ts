// src/pages/api/sendBrief.ts
import type { APIRoute } from 'astro';

export const POST: APIRoute = async ({ request }) => {
    if (!request.headers.get("Content-Type")?.includes("application/json")) {
        return new Response(JSON.stringify({ message: "Unsupported media type" }), { status: 415 });
    }

    try {
        const data = await request.json();

        // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        const { company_name, contacts, preferred_contact } = data;
        const shortMessage = `<b>üî• –ù–æ–≤—ã–π –±—Ä–∏—Ñ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!</b>\n\n<b>–û—Ç:</b> ${company_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contacts || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ${preferred_contact || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

        // 2. –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏ –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±—Ä–∏—Ñ–∞
        const jsonData = JSON.stringify(data, null, 2);
        const jsonBlob = new Blob([jsonData], { type: 'application/json' });

        // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram
        const formData = new FormData();
        const { BOT_TOKEN, CHAT_ID, TOPIC_ID } = import.meta.env;

        if (!BOT_TOKEN || !CHAT_ID) {
            throw new Error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram (BOT_TOKEN –∏–ª–∏ CHAT_ID) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
        }

        formData.append('chat_id', CHAT_ID);
        formData.append('caption', shortMessage);
        formData.append('parse_mode', 'HTML');
        // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º Blob –∫–∞–∫ —Ñ–∞–π–ª
        formData.append('document', jsonBlob, `brief-${new Date().toISOString()}.json`);

        if (TOPIC_ID) {
            formData.append('message_thread_id', TOPIC_ID);
        }

        // 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram
        const tgResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendDocument`, {
            method: 'POST',
            body: formData, // fetch –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type –¥–ª—è FormData
        });

        if (!tgResponse.ok) {
            const errorText = await tgResponse.text();
            console.error("–û—à–∏–±–∫–∞ –æ—Ç API Telegram:", errorText);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram. –°—Ç–∞—Ç—É—Å: ${tgResponse.status}`);
        }

        return new Response(JSON.stringify({ message: 'Brief sent successfully!' }), { status: 200 });

    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–∏—Ñ–∞:', error);
        return new Response(JSON.stringify({ message: 'Internal Server Error' }), { status: 500 });
    }
};
