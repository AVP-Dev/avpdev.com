// src/pages/api/sendBrief.ts
import type { APIRoute } from 'astro';
import { z } from 'zod';

// Zod-—Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–∏—Ñ–∞
const briefSchema = z.object({
  company_name: z.string().min(1, { message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }),
  contacts: z.string().min(1, { message: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }),
  current_site: z.string().url({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π URL —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞' }).optional().or(z.literal('')),
  competitors: z.string().optional(),
  target_audience: z.string().optional(),
  project_goals: z.string().optional(),
  site_type: z.enum(['landing', 'corporate', 'ecommerce', 'promo', 'other']),
  design_preferences: z.string().optional(),
  content_sources: z.string().optional(),
  features: z.array(z.string()).optional(),
  deadline: z.string().optional(),
  budget: z.string().optional(),
  preferred_contact: z.enum(['telegram', 'whatsapp', 'email', 'phone']),
  additional_info: z.string().optional(),
  support: z.array(z.string()).optional(),
});


function sanitizeHTML(str: string | undefined | null): string {
    if (!str) return '';
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
}

export const POST: APIRoute = async ({ request }) => {
    try {
        const data = await request.json();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é Zod
        const validationResult = briefSchema.safeParse(data);

        if (!validationResult.success) {
            return new Response(JSON.stringify({
                message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                errors: validationResult.error.flatten().fieldErrors,
            }), { status: 400 });
        }

        const validatedData = validationResult.data;

        // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const sanitizedData = Object.fromEntries(
            Object.entries(validatedData).map(([key, value]) => {
                if (typeof value === 'string') {
                    return [key, sanitizeHTML(value)];
                }
                // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'features')
                if (Array.isArray(value) && value.every(item => typeof item === 'string')) {
                    return [key, value.map(item => sanitizeHTML(item))];
                }
                return [key, value];
            })
        );


        const shortMessage = `<b>üî• –ù–æ–≤—ã–π –±—Ä–∏—Ñ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!</b>\n\n<b>–û—Ç:</b> ${sanitizedData.company_name}\n<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${sanitizedData.contacts}`;
        const jsonData = JSON.stringify(sanitizedData, null, 2);
        const jsonBlob = new Blob([jsonData], { type: 'application/json' });

        const tgFormData = new FormData();
        const { BOT_TOKEN, CHAT_ID, TOPIC_ID } = import.meta.env;

        if (!BOT_TOKEN || !CHAT_ID) throw new Error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");

        tgFormData.append('chat_id', CHAT_ID);
        tgFormData.append('caption', shortMessage);
        tgFormData.append('parse_mode', 'HTML');
        tgFormData.append('document', jsonBlob, `brief-${new Date().toISOString()}.json`);
        if (TOPIC_ID) tgFormData.append('message_thread_id', TOPIC_ID);

        const tgResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendDocument`, {
            method: 'POST',
            body: tgFormData,
        });

        if (!tgResponse.ok) {
            const errorBody = await tgResponse.json();
            console.error("–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", JSON.stringify(errorBody, null, 2));
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—Ä–∏—Ñ –≤ Telegram.');
        }

        return new Response(JSON.stringify({ message: "Success" }), { status: 200 });

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /api/sendBrief:", error);
        return new Response(JSON.stringify({ message: "Server error" }), { status: 500 });
    }
};